问题描述：
给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。



图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

 

示例:

输入: [1,8,6,2,5,4,8,3,7]
输出: 49

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/container-with-most-water
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解决思路：
矩形面积=高度*宽度
容器最大高度由最小的一处保证 高度=min(height[left],height[right])
而宽度=right-left
当前最大面积
    int nowArea = Math.min(height[left],height[right])*(right-left);
    maxArea=Math.max(maxArea,nowArea);
随着left++和right--，我们可知宽度是一定会缩小的，所以我们必须要保证最小的高度是上升的，这样情况下的面积才有可能大于maxArea
所以我们缩进高度小的一边，才能使得最小高度可以上升


